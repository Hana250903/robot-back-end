// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Robot.Repository.Entities;

#nullable disable

namespace Robot.Repository.Migrations
{
    [DbContext(typeof(FactoryManagementContext))]
    [Migration("20250210075615_Robotdb")]
    partial class Robotdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Robot.Repository.Entities.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("LogID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Action");

                    b.Property<string>("Details")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Details");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("TaskID");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("TimeStamp");

                    b.HasKey("LogId")
                        .HasName("PK_Log");

                    b.HasIndex("TaskId");

                    b.ToTable("Log", (string)null);
                });

            modelBuilder.Entity("Robot.Repository.Entities.Maintenance", b =>
                {
                    b.Property<int>("MaintenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("MaintenanceID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MaintenanceId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Date");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Description");

                    b.Property<int>("RobotId")
                        .HasColumnType("integer")
                        .HasColumnName("RobotID");

                    b.Property<string>("Technician")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Technician");

                    b.HasKey("MaintenanceId")
                        .HasName("PK_Maintenance");

                    b.HasIndex("RobotId");

                    b.ToTable("Maintenance", (string)null);
                });

            modelBuilder.Entity("Robot.Repository.Entities.Operator", b =>
                {
                    b.Property<int>("OperatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("OperatorID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OperatorId"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ContactInfo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.Property<string>("Shift")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Shift");

                    b.HasKey("OperatorId")
                        .HasName("PK_Operator");

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("Robot.Repository.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ProductID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Dimensions")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Dimensions");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Material");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.HasKey("ProductId")
                        .HasName("PK_Product");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Robot.Repository.Entities.Robot", b =>
                {
                    b.Property<int>("RobotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("RobotID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RobotId"));

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastMaintenanceDate");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Model");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Position");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Status");

                    b.HasKey("RobotId")
                        .HasName("PK_Robot");

                    b.ToTable("Robot", (string)null);
                });

            modelBuilder.Entity("Robot.Repository.Entities.Stamp", b =>
                {
                    b.Property<int>("StampId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("StampID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StampId"));

                    b.Property<string>("InkColor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("InkColor");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Size");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Type");

                    b.HasKey("StampId")
                        .HasName("PK_Stamp");

                    b.ToTable("Stamp", (string)null);
                });

            modelBuilder.Entity("Robot.Repository.Entities.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TaskID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskId"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EndTime");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("ProductID");

                    b.Property<int>("RobotId")
                        .HasColumnType("integer")
                        .HasColumnName("RobotID");

                    b.Property<int?>("StampId")
                        .HasColumnType("integer")
                        .HasColumnName("StampID");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("StartTime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Status");

                    b.HasKey("TaskId")
                        .HasName("PK_Tasks");

                    b.HasIndex("ProductId");

                    b.HasIndex("RobotId");

                    b.HasIndex("StampId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Robot.Repository.Entities.Log", b =>
                {
                    b.HasOne("Robot.Repository.Entities.Task", "Task")
                        .WithMany("Logs")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_Log_TaskID");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Robot.Repository.Entities.Maintenance", b =>
                {
                    b.HasOne("Robot.Repository.Entities.Robot", "Robot")
                        .WithMany("Maintenances")
                        .HasForeignKey("RobotId")
                        .IsRequired()
                        .HasConstraintName("FK_Maintenance_Robot");

                    b.Navigation("Robot");
                });

            modelBuilder.Entity("Robot.Repository.Entities.Task", b =>
                {
                    b.HasOne("Robot.Repository.Entities.Product", "Product")
                        .WithMany("Tasks")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Tasks_Product");

                    b.HasOne("Robot.Repository.Entities.Robot", "Robot")
                        .WithMany("Tasks")
                        .HasForeignKey("RobotId")
                        .IsRequired()
                        .HasConstraintName("FK_Tasks_Robot");

                    b.HasOne("Robot.Repository.Entities.Stamp", "Stamp")
                        .WithMany("Tasks")
                        .HasForeignKey("StampId")
                        .HasConstraintName("FK_Tasks_Stamp");

                    b.Navigation("Product");

                    b.Navigation("Robot");

                    b.Navigation("Stamp");
                });

            modelBuilder.Entity("Robot.Repository.Entities.Product", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Robot.Repository.Entities.Robot", b =>
                {
                    b.Navigation("Maintenances");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Robot.Repository.Entities.Stamp", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Robot.Repository.Entities.Task", b =>
                {
                    b.Navigation("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
